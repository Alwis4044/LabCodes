#include<iostream>
#include<omp.h>
using namespace std;

void merge(int *arr,int l,int mid, int r)
{
    int n1 = mid - l + 1;
    int n2 = r - mid;

    //temp arrays
    int a[n1];
    int b[n2];

    for(int i = 0; i < n1; i++)
    {
        a[i] = arr[l + i];
    }

    for(int i = 0; i < n1; i++)
    {
        b[i] = arr[mid + 1 + i];
    }

    int i = 0;  //pointer for array a
    int j = 0;  //pointer for array b
    int k = l;  //pointer for main array
    while(i < n1 && j < n2)
    {
        if(a[i] < b[j])
        {
            arr[k] = a[i];
            k++;
            i++;
        }
        else{
            arr[k] = b[j];
            k++;
            j++;
        }
    }

    while(i < n1)
    {
        arr[k] = a[i];
        k++;
        i++;
    }

    while(j < n2)
    {
        arr[k] = b[j];
        k++;
        j++;
    }

}

void mergeSort(int *arr,int l, int r)
{
    if(l < r)
    {
        int mid = (l + r)/2;
        #pragma omp parallel sections
        {
            #pragma omp section
            mergeSort(arr,l,mid);

            #pragma omp section 
            mergeSort(arr,mid+1,r);


        }
       
        merge(arr,l,mid,r);

    }
}

int main()
{
    //int arr[] = {5,4,3,2,1};
    int *arr,n;
    cin >> n;

    arr = new int[n]; 
    for(int i = 0; i < n; i++)
    {
        cin >> arr[i];
    }

    #pragma omp parallel 
    {
        #pragma omp single
        mergeSort(arr,0,n-1);

        // Print thread ID
        /*int threadId = omp_get_thread_num();
        cout << "Thread ID: " << threadId << endl;*/

    }

    for(int i = 0; i < n; i++)
    {
        cout << arr[i] << " ";
    }
    cout << endl;

    delete[] arr;
    return 0;
}


