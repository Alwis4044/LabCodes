#include<iostream>
#include<omp.h>
using namespace std;

void BubbleSort(int *arr,int size)
{
    int counter;
    for(counter = 1; counter < size; counter++)
    {
        #pragma omp parallel for
        for(int i = 0; i < size-counter; i++)
        {
            if(arr[i] > arr[i+1])
            {
                /*int temp = arr[i];
                arr[i] = arr[i+1];
                arr[i+1] = temp;*/
                swap(arr[i],arr[i+1]);
            }
        }
    }
}

int swap(int &a,int &b)
{
    int temp;
    temp = a;
    a = b;
    b = temp;

}
int main()
{
    int *arr,n;
    cin >> n;

    arr = new int[n];
    for(int i = 0; i < n; i++)
    {
        cin >> arr[i];
    }

    /*int counter = 1;
    while(counter < n)
    {
        for(int i = 0; i < n - counter; i++)
        {
            if(arr[i] > arr[i+1])
            {
                int temp = arr[i];
                arr[i] = arr[i+1];
                arr[i+1] = temp;
            }
        }
        counter++;
    }*/

    BubbleSort(arr,n);
    cout << "Sorted Array: ";
    for(int i = 0; i < n; i++)
    {
        cout << arr[i] << " ";
    }

    delete[] arr;
    return 0;
}


Pass - 1
11 15 12 16 9 4
11 15 12 16 9 4
11 12 15 16 9 4
11 12 15 16 9 4
11 12 15 9 16 4
11 12 15 9 4 16

Pass 2
11 12 15 9 4 16
11 12 15 9 4 16
11 12 9 15 4 16
11 12 9 4 15 16

Pass 3
11 12 9 4 15 16
11 9 12 4 15 16


Last pass
4 9 11 12 15 16




